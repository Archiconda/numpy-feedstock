--- numpy-1.14.5.orig/numpy/testing/tests/test_utils.py	2018-06-12 18:28:52.000000000 -0300
+++ numpy-1.14.5/numpy/testing/tests/test_utils.py	2018-08-31 15:09:01.401098426 -0300
@@ -1084,18 +1084,28 @@
                           lambda: assert_string_equal("foo", "hello"))
 
 
-def assert_warn_len_equal(mod, n_in_context, py3_n_in_context=None):
-    mod_warns = mod.__warningregistry__
-    # Python 3.4 appears to clear any pre-existing warnings of the same type,
-    # when raising warnings inside a catch_warnings block. So, there is a
-    # warning generated by the tests within the context manager, but no
-    # previous warnings.
-    if 'version' in mod_warns:
-        if py3_n_in_context is None:
-            py3_n_in_context = n_in_context
-        assert_equal(len(mod_warns) - 1, py3_n_in_context)
-    else:
-        assert_equal(len(mod_warns), n_in_context)
+def assert_warn_len_equal(mod, n_in_context, py34=None, py37=None):
+     mod_warns = mod.__warningregistry__
+     num_warns = len(mod_warns)
+     # Python 3.4 appears to clear any pre-existing warnings of the same type,
+     # when raising warnings inside a catch_warnings block. So, there is a
+     # warning generated by the tests within the context manager, but no
+     # previous warnings.
+     if 'version' in mod_warns:
+         # Python 3 adds a 'version' entry to the registry,
+         # do not count it.
+         num_warns -= 1
+ 
+         # Behavior of warnings is Python version dependent. Adjust the
+         # expected result to compensate. In particular, Python 3.7 does
+         # not make an entry for ignored warnings.
+         if sys.version_info[:2] >= (3, 7):
+             if py37 is not None:
+                 n_in_context = py37
+         elif sys.version_info[:2] >= (3, 4):
+             if py34 is not None:
+                 n_in_context = py34
+     assert_equal(num_warns, n_in_context)
 
 
 def _get_fresh_mod():
@@ -1120,18 +1130,18 @@
     with clear_and_catch_warnings():
         warnings.simplefilter('ignore')
         warnings.warn('Some warning')
-    assert_warn_len_equal(my_mod, 1)
+    assert_warn_len_equal(my_mod, 1, py37=0)
     # Confirm that specifying module keeps old warning, does not add new
     with clear_and_catch_warnings(modules=[my_mod]):
         warnings.simplefilter('ignore')
         warnings.warn('Another warning')
-    assert_warn_len_equal(my_mod, 1)
+    assert_warn_len_equal(my_mod, 1, py37=0)
     # Another warning, no module spec does add to warnings dict, except on
     # Python 3.4 (see comments in `assert_warn_len_equal`)
     with clear_and_catch_warnings():
         warnings.simplefilter('ignore')
         warnings.warn('Another warning')
-    assert_warn_len_equal(my_mod, 2, 1)
+    assert_warn_len_equal(my_mod, 2, py34=1, py37=0)
 
 
 def test_suppress_warnings_module():
@@ -1177,7 +1187,7 @@
     with suppress_warnings():
         warnings.simplefilter('ignore')
         warnings.warn('Some warning')
-    assert_warn_len_equal(my_mod, 1)
+    assert_warn_len_equal(my_mod, 1, py37=0)
 
 
 def test_suppress_warnings_type():
@@ -1205,7 +1215,7 @@
     with suppress_warnings():
         warnings.simplefilter('ignore')
         warnings.warn('Some warning')
-    assert_warn_len_equal(my_mod, 1)
+    assert_warn_len_equal(my_mod, 1, py37=0)
 
 
 def test_suppress_warnings_decorate_no_record():
